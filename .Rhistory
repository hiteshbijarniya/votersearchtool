library(shiny)
ui <- fluidPage(
"Hello, world!"
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
View(ui)
View(ui)
View(server)
View(ui)
View(ui)
ui[[2]]ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
View(ui)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
View(ui)
source("~/Assign 1/Assign 1.Rproj")
source("~/Assign 1/.Rhistory")
.Rhistory
source("~/Assign 1/code.Rhistory")
shinyApp(ui, server)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
selectInput(
"state", "What's your favourite state?", state.name,
multiple = TRUE
)
)
View(ui)
ui <- fluidPage(
selectInput("state", "What's your favourite state?", state.name),
radioButtons("animal", "What's your favourite animal?", animals)
)
animals <- c("dog", "cat", "mouse", "bird", "other", "I hate animals")
ui <- fluidPage(
selectInput("state", "What's your favourite state?", state.name),
radioButtons("animal", "What's your favourite animal?", animals)
)
server <- function(input, output, session) {
output$greeting <- renderText({
paste0("Hello ", input$name, "!")
})
}
runApp()
runApp()
runApp()
runApp()
runApp()
library(readxl)
S04AC223 <- read_excel("C:/Users/hp/OneDrive/Desktop/janta ka mood/assign 1/S04AC223.xlsx")
View(S04AC223)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(readxl)
S04AC223 <- read_excel("S04AC223.xlsx")
View(S04AC223)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
temp <- read_excel("S04AC223.xlsx")
runApp()
runApp()
updateSelectInput(session,"varlist", choices = temp(colnames(data())))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(shinythemes)
library(datasets)
library(dplyr)
library(plotrix)
library(ggplot2)
library(readxl)
library(readr)
temp <- read.csv("S04AC223.csv")
selectInput(
inputId,
label,
choices,
selected = NULL,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL
)
runApp(
appDir = getwd(),
port = getOption("shiny.port"),
launch.browser = getOption("shiny.launch.browser", interactive()),
host = getOption("shiny.host", "127.0.0.1"),
workerId = "",
quiet = FALSE,
display.mode = c("auto", "normal", "showcase"),
test.mode = getOption("shiny.testmode", FALSE)
)
options(shiny.maxRequestSize=30*1024^2)
getwd()
ui<-fluidPage(
titlePanel(title = h4("SEARCH BOX",align="center")),
sidebarLayout(
sidebarPanel(
selectInput("instate","select input",choices = temp$Age),
selectInput("instatestate","select input",choices = temp$VoterFirstNameEn)
),
mainPanel(
tableOutput("iddd")
)
)
)
library(shiny)
server<-shinyServer(function(input,output){
output$iddd <- renderTable({
statefilter<-subset(temp,temp$Sex == input$instate)
})
output$iddd <- renderTable({
statefilter<-subset(temp,temp$VoterFirstNameEn == input$instatestate)
})
})
shinyApp(ui,server)
library(shiny)
library(shinythemes)
library(datasets)
library(dplyr)
library(plotrix)
library(ggplot2)
library(readxl)
library(readr)
temp <- read.csv("S04AC223.csv")
selectInput(
inputId,
label,
choices,
abcd,
selected = NULL,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL
)
runApp(
appDir = getwd(),
port = getOption("shiny.port"),
launch.browser = getOption("shiny.launch.browser", interactive()),
host = getOption("shiny.host", "127.0.0.1"),
workerId = "",
quiet = FALSE,
display.mode = c("auto", "normal", "showcase"),
test.mode = getOption("shiny.testmode", FALSE)
)
options(shiny.maxRequestSize=30*1024^2)
getwd()
ui<-fluidPage(
titlePanel(title = h4("SEARCH BOX",align="center")),
sidebarLayout(
sidebarPanel(
selectInput("instate","select input",choices = temp$Age),
selectInput("instatestate","select input",abcd = temp$VoterFirstNameEn)
),
mainPanel(
tableOutput("iddd")
)
)
)
library(shiny)
server<-shinyServer(function(input,output){
output$iddd <- renderTable({
statefilter<-subset(temp,temp$Sex == input$instate)
})
output$iddd <- renderTable({
statefilter<-subset(temp,temp$VoterFirstNameEn == input$instatestate)
})
})
shinyApp(ui,server)
library(shiny)
library(shinythemes)
library(datasets)
library(dplyr)
library(plotrix)
library(ggplot2)
library(readxl)
library(readr)
temp <- read.csv("S04AC223.csv")
selectInput(
inputId,
label,
choices,
selected = NULL,
multiple = FALSE,
selectize = TRUE,
width = NULL,
size = NULL
)
runApp(
appDir = getwd(),
port = getOption("shiny.port"),
launch.browser = getOption("shiny.launch.browser", interactive()),
host = getOption("shiny.host", "127.0.0.1"),
workerId = "",
quiet = FALSE,
display.mode = c("auto", "normal", "showcase"),
test.mode = getOption("shiny.testmode", FALSE)
)
options(shiny.maxRequestSize=30*1024^2)
getwd()
ui<-fluidPage(
titlePanel(title = h4("SEARCH BOX",align="center")),
sidebarLayout(
sidebarPanel(
selectInput("instate","select input",choices = temp$Age),
selectInput("instatestate","select input",choices = temp$VoterFirstNameEn),
selectInput("instatestatestate","select input",choices = temp$RelationFirstNameEn)
),
mainPanel(
tableOutput("iddd")
)
)
)
library(shiny)
server<-shinyServer(function(input,output){
output$iddd <- renderTable({
statefilter<-subset(temp,temp$Sex == input$instate && temp$VoterFirstNameEn == input$instatestate && temp$RelationFirstNameEn == input$instatestatestate)
})
})
shinyApp(ui,server)
library(shiny)
library(shinythemes)
library(datasets)
library(dplyr)
library(plotrix)
library(ggplot2)
options(shiny.maxRequestSize=30*1024^2)
temp <- read_excel("S04AC223.xlsx")
##ui##
ui <- fluidPage(
theme = shinytheme("united"),
title = "datatables",
sidebarLayout(
sidebarPanel(
fileInput('S04AC223', 'Select your file',
accept = c(
'text/xlsx',
'text/S04AC223','.xlsx',
'.sas7bdat'
)
),
selectInput("Varlist", "columns to show:", choices = c(colnames(data())),
multiple = TRUE)
),
mainPanel(
tabsetPanel(
id='dataset',
tabPanel("Data", DT::dataTableOutput("mytable1"))
)
)
)
)
server <- function(input, output, session){
data1 <- reactive({
if(is.null(input$S04AC223)) return(NULL)
inFile <- input&S04AC223
read_xlsx(inFile$datapath)
})
observeEvent(input$S04AC223, {
updateSelectInput(session,"varlist", choices = c(colnames(data())))
})
new_data <- reactive({
raw_data <- data1()
DT:: datatable(raw_data[, input$varlist, drop=FALSE], filter="top", selection = 'multiple', escape=FALSE)
})
output$mytable1 <- DT::renderDataTable({
new_data()
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)  # for the dataset
temp <- read_csv("S04AC223.csv")
ui <- fluidPage(
title = "Examples of DataTables",
sidebarLayout(
sidebarPanel(
conditionalPanel(
'input.dataset === "temp"',
checkboxGroupInput("show_vars", "Columns to show:",
names(temp), selected = names(temp))
),
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("temp", DT::dataTableOutput("mytable1")),
)
)
)
)
server <- function(input, output) {
# choose columns to display
diamonds2 = temp[sample(nrow(temp), 1000), ]
output$mytable1 <- DT::renderDataTable({
DT::datatable(diamonds2[, input$show_vars, drop = FALSE])
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)  # for the dataset
temp <- read_excel("S04AC223.xlsx")
ui <- fluidPage(
title = "Examples of DataTables",
sidebarLayout(
sidebarPanel(
conditionalPanel(
'input.dataset === "temp"',
checkboxGroupInput("show_vars", "Columns to show:",
names(temp), selected = names(temp))
),
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("temp", DT::dataTableOutput("mytable1")),
)
)
)
)
server <- function(input, output) {
# choose columns to display
diamonds2 = temp[sample(nrow(temp), 1000), ]
output$mytable1 <- DT::renderDataTable({
DT::datatable(diamonds2[, input$show_vars, drop = FALSE])
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)  # for the dataset
temp <- read_excel("S04AC223.xlsx")
ui <- fluidPage(
title = "Examples of DataTables",
sidebarLayout(
sidebarPanel(
selectInput(
'input.dataset === "temp"',
checkboxGroupInput("show_vars", "Columns to show:",
names(temp), selected = names(temp))
),
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("temp", DT::dataTableOutput("mytable1")),
)
)
)
)
server <- function(input, output) {
# choose columns to display
diamonds2 = temp[sample(nrow(temp), 1000), ]
output$mytable1 <- DT::renderDataTable({
DT::datatable(diamonds2[, input$show_vars, drop = FALSE])
})
}
shinyApp(ui, server)
library(shiny)
library(DT)
temp <- read_excel("S04AC223.xlsx")
fluidPage(
title = 'Select Table Rows',
h1('A Client-side Table'),
fluidRow(
column(6, DT::dataTableOutput('x1')),
),
hr(),
h1('A Server-side Table'),
fluidRow(
column(9, DT::dataTableOutput('x3')),
column(3, verbatimTextOutput('x4'))
)
)
server <- (function(input, output, session) {
output$x1 = DT::renderDataTable(cars, server = FALSE)
# server-side processing
mtcars2 = temp[, 1:26]
output$x3 = DT::renderDataTable(mtcars2, server = TRUE)
# print the selected indices
output$x4 = renderPrint({
s = input$x3_rows_selected
if (length(s)) {
cat('These rows were selected:\n\n')
cat(s, sep = ', ')
}
})
})
shinyApp(ui, server)
library(shiny)
library(DT)
temp <- read_excel("S04AC223.xlsx")
fluidPage(
title = 'Select Table Rows',
h1('A Client-side Table'),
fluidRow(
column(6, DT::dataTableOutput('x1')),
),
hr(),
h1('A Server-side Table'),
fluidRow(
column(9, DT::dataTableOutput('x3')),
column(3, verbatimTextOutput('x4'))
)
)
server <- (function(input, output, session) {
output$x1 = DT::renderDataTable(cars, server = FALSE)
# server-side processing
mtcars2 = temp[, 1:26]
output$x3 = DT::renderDataTable(mtcars2, server = TRUE)
# print the selected indices
output$x4 = renderPrint({
s = input$x3_rows_selected
if (length(s)) {
cat('These rows were selected:\n\n')
cat(s, sep = ', ')
}
})
})
shinyApp(ui, server)
library(shiny)
library(DT)
temp <- read_excel("S04AC223.xlsx")
fluidPage(
title = 'Select Table Rows',
h1('A Client-side Table'),
fluidRow(
column(6, DT::dataTableOutput('x1')),
),
hr(),
h1('A Server-side Table'),
fluidRow(
column(9, DT::dataTableOutput('x3')),
column(3, verbatimTextOutput('x4'))
)
)
server <- (function(input, output, session) {
output$x1 = DT::renderDataTable(cars, server = FALSE)
# server-side processing
mtcars2 = temp[, 1:25]
output$x3 = DT::renderDataTable(mtcars2, server = TRUE)
# print the selected indices
output$x4 = renderPrint({
s = input$x3_rows_selected
if (length(s)) {
cat('These rows were selected:\n\n')
cat(s, sep = ', ')
}
})
})
shinyApp(ui, server)
